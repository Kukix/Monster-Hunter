//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientTest.MonsterFeastService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.Character CharacterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LosesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.Character Character {
            get {
                return this.CharacterField;
            }
            set {
                if ((object.ReferenceEquals(this.CharacterField, value) != true)) {
                    this.CharacterField = value;
                    this.RaisePropertyChanged("Character");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Loses {
            get {
                return this.LosesField;
            }
            set {
                if ((this.LosesField.Equals(value) != true)) {
                    this.LosesField = value;
                    this.RaisePropertyChanged("Loses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Character", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Character : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttributePointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.CharClass CharClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConstitutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DexterityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.Element ElementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExperienceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MagicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SkillPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StrengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WisdomField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Agility {
            get {
                return this.AgilityField;
            }
            set {
                if ((this.AgilityField.Equals(value) != true)) {
                    this.AgilityField = value;
                    this.RaisePropertyChanged("Agility");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttributePoints {
            get {
                return this.AttributePointsField;
            }
            set {
                if ((this.AttributePointsField.Equals(value) != true)) {
                    this.AttributePointsField = value;
                    this.RaisePropertyChanged("AttributePoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.CharClass CharClass {
            get {
                return this.CharClassField;
            }
            set {
                if ((this.CharClassField.Equals(value) != true)) {
                    this.CharClassField = value;
                    this.RaisePropertyChanged("CharClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Constitution {
            get {
                return this.ConstitutionField;
            }
            set {
                if ((this.ConstitutionField.Equals(value) != true)) {
                    this.ConstitutionField = value;
                    this.RaisePropertyChanged("Constitution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dexterity {
            get {
                return this.DexterityField;
            }
            set {
                if ((this.DexterityField.Equals(value) != true)) {
                    this.DexterityField = value;
                    this.RaisePropertyChanged("Dexterity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.Element Element {
            get {
                return this.ElementField;
            }
            set {
                if ((this.ElementField.Equals(value) != true)) {
                    this.ElementField = value;
                    this.RaisePropertyChanged("Element");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Experience {
            get {
                return this.ExperienceField;
            }
            set {
                if ((this.ExperienceField.Equals(value) != true)) {
                    this.ExperienceField = value;
                    this.RaisePropertyChanged("Experience");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Magic {
            get {
                return this.MagicField;
            }
            set {
                if ((this.MagicField.Equals(value) != true)) {
                    this.MagicField = value;
                    this.RaisePropertyChanged("Magic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SkillPoints {
            get {
                return this.SkillPointsField;
            }
            set {
                if ((this.SkillPointsField.Equals(value) != true)) {
                    this.SkillPointsField = value;
                    this.RaisePropertyChanged("SkillPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Strength {
            get {
                return this.StrengthField;
            }
            set {
                if ((this.StrengthField.Equals(value) != true)) {
                    this.StrengthField = value;
                    this.RaisePropertyChanged("Strength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wisdom {
            get {
                return this.WisdomField;
            }
            set {
                if ((this.WisdomField.Equals(value) != true)) {
                    this.WisdomField = value;
                    this.RaisePropertyChanged("Wisdom");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CharClass", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    public enum CharClass : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warrior = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wizard = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Archer = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Element", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    public enum Element : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Water = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fire = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Air = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Earth = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attribute", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    public enum Attribute : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Strength = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Constitution = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Magic = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wisdom = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Agility = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dexterity = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Match : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> GameChatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.Player Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.Player Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RmNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.Player TurnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> GameChat {
            get {
                return this.GameChatField;
            }
            set {
                if ((object.ReferenceEquals(this.GameChatField, value) != true)) {
                    this.GameChatField = value;
                    this.RaisePropertyChanged("GameChat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.Player Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.Player Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RmNumber {
            get {
                return this.RmNumberField;
            }
            set {
                if ((this.RmNumberField.Equals(value) != true)) {
                    this.RmNumberField = value;
                    this.RaisePropertyChanged("RmNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.Player Turn {
            get {
                return this.TurnField;
            }
            set {
                if ((object.ReferenceEquals(this.TurnField, value) != true)) {
                    this.TurnField = value;
                    this.RaisePropertyChanged("Turn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Skill", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Skill : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EffectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.MonsterFeastService.Element ElementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PowerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Effect {
            get {
                return this.EffectField;
            }
            set {
                if ((object.ReferenceEquals(this.EffectField, value) != true)) {
                    this.EffectField = value;
                    this.RaisePropertyChanged("Effect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.MonsterFeastService.Element Element {
            get {
                return this.ElementField;
            }
            set {
                if ((this.ElementField.Equals(value) != true)) {
                    this.ElementField = value;
                    this.RaisePropertyChanged("Element");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PowerName {
            get {
                return this.PowerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PowerNameField, value) != true)) {
                    this.PowerNameField = value;
                    this.RaisePropertyChanged("PowerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MonsterFeastService", ConfigurationName="MonsterFeastService.ILogin")]
    public interface ILogin {
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/isRegistered", ReplyAction="MonsterFeastService/ILogin/isRegisteredResponse")]
        bool isRegistered(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/isRegistered", ReplyAction="MonsterFeastService/ILogin/isRegisteredResponse")]
        System.Threading.Tasks.Task<bool> isRegisteredAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/Register", ReplyAction="MonsterFeastService/ILogin/RegisterResponse")]
        void Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/Register", ReplyAction="MonsterFeastService/ILogin/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/Login", ReplyAction="MonsterFeastService/ILogin/LoginResponse")]
        ClientTest.MonsterFeastService.Player Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/Login", ReplyAction="MonsterFeastService/ILogin/LoginResponse")]
        System.Threading.Tasks.Task<ClientTest.MonsterFeastService.Player> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/Logout", ReplyAction="MonsterFeastService/ILogin/LogoutResponse")]
        void Logout(ClientTest.MonsterFeastService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/Logout", ReplyAction="MonsterFeastService/ILogin/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(ClientTest.MonsterFeastService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/hasChar", ReplyAction="MonsterFeastService/ILogin/hasCharResponse")]
        bool hasChar(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/hasChar", ReplyAction="MonsterFeastService/ILogin/hasCharResponse")]
        System.Threading.Tasks.Task<bool> hasCharAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/createCharacter", ReplyAction="MonsterFeastService/ILogin/createCharacterResponse")]
        void createCharacter(int id, string name, ClientTest.MonsterFeastService.CharClass charClass, ClientTest.MonsterFeastService.Element element);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/createCharacter", ReplyAction="MonsterFeastService/ILogin/createCharacterResponse")]
        System.Threading.Tasks.Task createCharacterAsync(int id, string name, ClientTest.MonsterFeastService.CharClass charClass, ClientTest.MonsterFeastService.Element element);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/addToList", ReplyAction="MonsterFeastService/ILogin/addToListResponse")]
        void addToList(ClientTest.MonsterFeastService.Player p);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILogin/addToList", ReplyAction="MonsterFeastService/ILogin/addToListResponse")]
        System.Threading.Tasks.Task addToListAsync(ClientTest.MonsterFeastService.Player p);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginChannel : ClientTest.MonsterFeastService.ILogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginClient : System.ServiceModel.ClientBase<ClientTest.MonsterFeastService.ILogin>, ClientTest.MonsterFeastService.ILogin {
        
        public LoginClient() {
        }
        
        public LoginClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool isRegistered(string username) {
            return base.Channel.isRegistered(username);
        }
        
        public System.Threading.Tasks.Task<bool> isRegisteredAsync(string username) {
            return base.Channel.isRegisteredAsync(username);
        }
        
        public void Register(string username, string password) {
            base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string username, string password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public ClientTest.MonsterFeastService.Player Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<ClientTest.MonsterFeastService.Player> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Logout(ClientTest.MonsterFeastService.Player player) {
            base.Channel.Logout(player);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(ClientTest.MonsterFeastService.Player player) {
            return base.Channel.LogoutAsync(player);
        }
        
        public bool hasChar(string username) {
            return base.Channel.hasChar(username);
        }
        
        public System.Threading.Tasks.Task<bool> hasCharAsync(string username) {
            return base.Channel.hasCharAsync(username);
        }
        
        public void createCharacter(int id, string name, ClientTest.MonsterFeastService.CharClass charClass, ClientTest.MonsterFeastService.Element element) {
            base.Channel.createCharacter(id, name, charClass, element);
        }
        
        public System.Threading.Tasks.Task createCharacterAsync(int id, string name, ClientTest.MonsterFeastService.CharClass charClass, ClientTest.MonsterFeastService.Element element) {
            return base.Channel.createCharacterAsync(id, name, charClass, element);
        }
        
        public void addToList(ClientTest.MonsterFeastService.Player p) {
            base.Channel.addToList(p);
        }
        
        public System.Threading.Tasks.Task addToListAsync(ClientTest.MonsterFeastService.Player p) {
            return base.Channel.addToListAsync(p);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MonsterFeastService", ConfigurationName="MonsterFeastService.ILobby", CallbackContract=typeof(ClientTest.MonsterFeastService.ILobbyCallback))]
    public interface ILobby {
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/FindMatch", ReplyAction="MonsterFeastService/ILobby/FindMatchResponse")]
        void FindMatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/FindMatch", ReplyAction="MonsterFeastService/ILobby/FindMatchResponse")]
        System.Threading.Tasks.Task FindMatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/AllocateAttribute", ReplyAction="MonsterFeastService/ILobby/AllocateAttributeResponse")]
        void AllocateAttribute(ClientTest.MonsterFeastService.Attribute a);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/AllocateAttribute", ReplyAction="MonsterFeastService/ILobby/AllocateAttributeResponse")]
        System.Threading.Tasks.Task AllocateAttributeAsync(ClientTest.MonsterFeastService.Attribute a);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SubscribeMatch", ReplyAction="MonsterFeastService/ILobby/SubscribeMatchResponse")]
        void SubscribeMatch(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SubscribeMatch", ReplyAction="MonsterFeastService/ILobby/SubscribeMatchResponse")]
        System.Threading.Tasks.Task SubscribeMatchAsync(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/UnSubscribeMatch", ReplyAction="MonsterFeastService/ILobby/UnSubscribeMatchResponse")]
        void UnSubscribeMatch(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/UnSubscribeMatch", ReplyAction="MonsterFeastService/ILobby/UnSubscribeMatchResponse")]
        System.Threading.Tasks.Task UnSubscribeMatchAsync(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SubscribeListPlayers", ReplyAction="MonsterFeastService/ILobby/SubscribeListPlayersResponse")]
        void SubscribeListPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SubscribeListPlayers", ReplyAction="MonsterFeastService/ILobby/SubscribeListPlayersResponse")]
        System.Threading.Tasks.Task SubscribeListPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/UnSubscribeListPlayers", ReplyAction="MonsterFeastService/ILobby/UnSubscribeListPlayersResponse")]
        void UnSubscribeListPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/UnSubscribeListPlayers", ReplyAction="MonsterFeastService/ILobby/UnSubscribeListPlayersResponse")]
        System.Threading.Tasks.Task UnSubscribeListPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SubscribeLobby", ReplyAction="MonsterFeastService/ILobby/SubscribeLobbyResponse")]
        void SubscribeLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SubscribeLobby", ReplyAction="MonsterFeastService/ILobby/SubscribeLobbyResponse")]
        System.Threading.Tasks.Task SubscribeLobbyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/UnSubscribeLobby", ReplyAction="MonsterFeastService/ILobby/UnSubscribeLobbyResponse")]
        void UnSubscribeLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/UnSubscribeLobby", ReplyAction="MonsterFeastService/ILobby/UnSubscribeLobbyResponse")]
        System.Threading.Tasks.Task UnSubscribeLobbyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getOnlinePlayers", ReplyAction="MonsterFeastService/ILobby/getOnlinePlayersResponse")]
        System.Collections.Generic.List<string> getOnlinePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getOnlinePlayers", ReplyAction="MonsterFeastService/ILobby/getOnlinePlayersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getOnlinePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getPlayer", ReplyAction="MonsterFeastService/ILobby/getPlayerResponse")]
        ClientTest.MonsterFeastService.Player getPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getPlayer", ReplyAction="MonsterFeastService/ILobby/getPlayerResponse")]
        System.Threading.Tasks.Task<ClientTest.MonsterFeastService.Player> getPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getPlayers", ReplyAction="MonsterFeastService/ILobby/getPlayersResponse")]
        System.Collections.Generic.List<ClientTest.MonsterFeastService.Player> getPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getPlayers", ReplyAction="MonsterFeastService/ILobby/getPlayersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClientTest.MonsterFeastService.Player>> getPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getCharacter", ReplyAction="MonsterFeastService/ILobby/getCharacterResponse")]
        ClientTest.MonsterFeastService.Character getCharacter(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/getCharacter", ReplyAction="MonsterFeastService/ILobby/getCharacterResponse")]
        System.Threading.Tasks.Task<ClientTest.MonsterFeastService.Character> getCharacterAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/sendChallenge", ReplyAction="MonsterFeastService/ILobby/sendChallengeResponse")]
        void sendChallenge(string challenger, string reciever);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/sendChallenge", ReplyAction="MonsterFeastService/ILobby/sendChallengeResponse")]
        System.Threading.Tasks.Task sendChallengeAsync(string challenger, string reciever);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/answerChallenge", ReplyAction="MonsterFeastService/ILobby/answerChallengeResponse")]
        void answerChallenge(ClientTest.MonsterFeastService.Player challenger, ClientTest.MonsterFeastService.Player reciever, bool answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/answerChallenge", ReplyAction="MonsterFeastService/ILobby/answerChallengeResponse")]
        System.Threading.Tasks.Task answerChallengeAsync(ClientTest.MonsterFeastService.Player challenger, ClientTest.MonsterFeastService.Player reciever, bool answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/updateAttributes", ReplyAction="MonsterFeastService/ILobby/updateAttributesResponse")]
        void updateAttributes(string name, int strength, int constitution, int magic, int wisdom, int dexterity, int agility, int attributePoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/updateAttributes", ReplyAction="MonsterFeastService/ILobby/updateAttributesResponse")]
        System.Threading.Tasks.Task updateAttributesAsync(string name, int strength, int constitution, int magic, int wisdom, int dexterity, int agility, int attributePoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/createRoom", ReplyAction="MonsterFeastService/ILobby/createRoomResponse")]
        void createRoom(ClientTest.MonsterFeastService.Player player, int rmNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/createRoom", ReplyAction="MonsterFeastService/ILobby/createRoomResponse")]
        System.Threading.Tasks.Task createRoomAsync(ClientTest.MonsterFeastService.Player player, int rmNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/joinRoom", ReplyAction="MonsterFeastService/ILobby/joinRoomResponse")]
        void joinRoom(ClientTest.MonsterFeastService.Player player, int rmNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/joinRoom", ReplyAction="MonsterFeastService/ILobby/joinRoomResponse")]
        System.Threading.Tasks.Task joinRoomAsync(ClientTest.MonsterFeastService.Player player, int rmNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SendMessage", ReplyAction="MonsterFeastService/ILobby/SendMessageResponse")]
        void SendMessage(string message, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/SendMessage", ReplyAction="MonsterFeastService/ILobby/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string message, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/GetChatMessage", ReplyAction="MonsterFeastService/ILobby/GetChatMessageResponse")]
        string GetChatMessage();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastService/ILobby/GetChatMessage", ReplyAction="MonsterFeastService/ILobby/GetChatMessageResponse")]
        System.Threading.Tasks.Task<string> GetChatMessageAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/updateChatBox")]
        void updateChatBox(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/updatePlayerList")]
        void updatePlayerList(System.Collections.Generic.List<ClientTest.MonsterFeastService.Player> players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/updateMatchList")]
        void updateMatchList(System.Collections.Generic.List<ClientTest.MonsterFeastService.Match> matches);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/ChallengeSent")]
        void ChallengeSent(string player1, string player2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/ChallengeDenied")]
        void ChallengeDenied(string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/ChallengeAccepted")]
        void ChallengeAccepted(string player, ClientTest.MonsterFeastService.Match match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastService/ILobby/GameCreated")]
        void GameCreated(ClientTest.MonsterFeastService.Player player1, ClientTest.MonsterFeastService.Player player2, ClientTest.MonsterFeastService.Match match, ClientTest.MonsterFeastService.Player currentPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyChannel : ClientTest.MonsterFeastService.ILobby, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyClient : System.ServiceModel.DuplexClientBase<ClientTest.MonsterFeastService.ILobby>, ClientTest.MonsterFeastService.ILobby {
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void FindMatch() {
            base.Channel.FindMatch();
        }
        
        public System.Threading.Tasks.Task FindMatchAsync() {
            return base.Channel.FindMatchAsync();
        }
        
        public void AllocateAttribute(ClientTest.MonsterFeastService.Attribute a) {
            base.Channel.AllocateAttribute(a);
        }
        
        public System.Threading.Tasks.Task AllocateAttributeAsync(ClientTest.MonsterFeastService.Attribute a) {
            return base.Channel.AllocateAttributeAsync(a);
        }
        
        public void SubscribeMatch(int roomNr) {
            base.Channel.SubscribeMatch(roomNr);
        }
        
        public System.Threading.Tasks.Task SubscribeMatchAsync(int roomNr) {
            return base.Channel.SubscribeMatchAsync(roomNr);
        }
        
        public void UnSubscribeMatch(int roomNr) {
            base.Channel.UnSubscribeMatch(roomNr);
        }
        
        public System.Threading.Tasks.Task UnSubscribeMatchAsync(int roomNr) {
            return base.Channel.UnSubscribeMatchAsync(roomNr);
        }
        
        public void SubscribeListPlayers() {
            base.Channel.SubscribeListPlayers();
        }
        
        public System.Threading.Tasks.Task SubscribeListPlayersAsync() {
            return base.Channel.SubscribeListPlayersAsync();
        }
        
        public void UnSubscribeListPlayers() {
            base.Channel.UnSubscribeListPlayers();
        }
        
        public System.Threading.Tasks.Task UnSubscribeListPlayersAsync() {
            return base.Channel.UnSubscribeListPlayersAsync();
        }
        
        public void SubscribeLobby() {
            base.Channel.SubscribeLobby();
        }
        
        public System.Threading.Tasks.Task SubscribeLobbyAsync() {
            return base.Channel.SubscribeLobbyAsync();
        }
        
        public void UnSubscribeLobby() {
            base.Channel.UnSubscribeLobby();
        }
        
        public System.Threading.Tasks.Task UnSubscribeLobbyAsync() {
            return base.Channel.UnSubscribeLobbyAsync();
        }
        
        public System.Collections.Generic.List<string> getOnlinePlayers() {
            return base.Channel.getOnlinePlayers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getOnlinePlayersAsync() {
            return base.Channel.getOnlinePlayersAsync();
        }
        
        public ClientTest.MonsterFeastService.Player getPlayer(string username) {
            return base.Channel.getPlayer(username);
        }
        
        public System.Threading.Tasks.Task<ClientTest.MonsterFeastService.Player> getPlayerAsync(string username) {
            return base.Channel.getPlayerAsync(username);
        }
        
        public System.Collections.Generic.List<ClientTest.MonsterFeastService.Player> getPlayers() {
            return base.Channel.getPlayers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClientTest.MonsterFeastService.Player>> getPlayersAsync() {
            return base.Channel.getPlayersAsync();
        }
        
        public ClientTest.MonsterFeastService.Character getCharacter(int id) {
            return base.Channel.getCharacter(id);
        }
        
        public System.Threading.Tasks.Task<ClientTest.MonsterFeastService.Character> getCharacterAsync(int id) {
            return base.Channel.getCharacterAsync(id);
        }
        
        public void sendChallenge(string challenger, string reciever) {
            base.Channel.sendChallenge(challenger, reciever);
        }
        
        public System.Threading.Tasks.Task sendChallengeAsync(string challenger, string reciever) {
            return base.Channel.sendChallengeAsync(challenger, reciever);
        }
        
        public void answerChallenge(ClientTest.MonsterFeastService.Player challenger, ClientTest.MonsterFeastService.Player reciever, bool answer) {
            base.Channel.answerChallenge(challenger, reciever, answer);
        }
        
        public System.Threading.Tasks.Task answerChallengeAsync(ClientTest.MonsterFeastService.Player challenger, ClientTest.MonsterFeastService.Player reciever, bool answer) {
            return base.Channel.answerChallengeAsync(challenger, reciever, answer);
        }
        
        public void updateAttributes(string name, int strength, int constitution, int magic, int wisdom, int dexterity, int agility, int attributePoints) {
            base.Channel.updateAttributes(name, strength, constitution, magic, wisdom, dexterity, agility, attributePoints);
        }
        
        public System.Threading.Tasks.Task updateAttributesAsync(string name, int strength, int constitution, int magic, int wisdom, int dexterity, int agility, int attributePoints) {
            return base.Channel.updateAttributesAsync(name, strength, constitution, magic, wisdom, dexterity, agility, attributePoints);
        }
        
        public void createRoom(ClientTest.MonsterFeastService.Player player, int rmNumber) {
            base.Channel.createRoom(player, rmNumber);
        }
        
        public System.Threading.Tasks.Task createRoomAsync(ClientTest.MonsterFeastService.Player player, int rmNumber) {
            return base.Channel.createRoomAsync(player, rmNumber);
        }
        
        public void joinRoom(ClientTest.MonsterFeastService.Player player, int rmNumber) {
            base.Channel.joinRoom(player, rmNumber);
        }
        
        public System.Threading.Tasks.Task joinRoomAsync(ClientTest.MonsterFeastService.Player player, int rmNumber) {
            return base.Channel.joinRoomAsync(player, rmNumber);
        }
        
        public void SendMessage(string message, System.DateTime date) {
            base.Channel.SendMessage(message, date);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, System.DateTime date) {
            return base.Channel.SendMessageAsync(message, date);
        }
        
        public string GetChatMessage() {
            return base.Channel.GetChatMessage();
        }
        
        public System.Threading.Tasks.Task<string> GetChatMessageAsync() {
            return base.Channel.GetChatMessageAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WCFTest", ConfigurationName="MonsterFeastService.IGame", CallbackContract=typeof(ClientTest.MonsterFeastService.IGameCallback))]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/attack", ReplyAction="WCFTest/IGame/attackResponse")]
        void attack(ClientTest.MonsterFeastService.Skill a);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/attack", ReplyAction="WCFTest/IGame/attackResponse")]
        System.Threading.Tasks.Task attackAsync(ClientTest.MonsterFeastService.Skill a);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/usePoint", ReplyAction="WCFTest/IGame/usePointResponse")]
        void usePoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/usePoint", ReplyAction="WCFTest/IGame/usePointResponse")]
        System.Threading.Tasks.Task usePointAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/giveUp", ReplyAction="WCFTest/IGame/giveUpResponse")]
        void giveUp();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/giveUp", ReplyAction="WCFTest/IGame/giveUpResponse")]
        System.Threading.Tasks.Task giveUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/sendMessage", ReplyAction="WCFTest/IGame/sendMessageResponse")]
        void sendMessage(string message, ClientTest.MonsterFeastService.Player sender, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/sendMessage", ReplyAction="WCFTest/IGame/sendMessageResponse")]
        System.Threading.Tasks.Task sendMessageAsync(string message, ClientTest.MonsterFeastService.Player sender, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/SubscribeMatch", ReplyAction="WCFTest/IGame/SubscribeMatchResponse")]
        void SubscribeMatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/SubscribeMatch", ReplyAction="WCFTest/IGame/SubscribeMatchResponse")]
        System.Threading.Tasks.Task SubscribeMatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/UnSubscribeMatch", ReplyAction="WCFTest/IGame/UnSubscribeMatchResponse")]
        void UnSubscribeMatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFTest/IGame/UnSubscribeMatch", ReplyAction="WCFTest/IGame/UnSubscribeMatchResponse")]
        System.Threading.Tasks.Task UnSubscribeMatchAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WCFTest/IGame/TurnStart")]
        void TurnStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WCFTest/IGame/TurnEnded")]
        void TurnEnded();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : ClientTest.MonsterFeastService.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<ClientTest.MonsterFeastService.IGame>, ClientTest.MonsterFeastService.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void attack(ClientTest.MonsterFeastService.Skill a) {
            base.Channel.attack(a);
        }
        
        public System.Threading.Tasks.Task attackAsync(ClientTest.MonsterFeastService.Skill a) {
            return base.Channel.attackAsync(a);
        }
        
        public void usePoint() {
            base.Channel.usePoint();
        }
        
        public System.Threading.Tasks.Task usePointAsync() {
            return base.Channel.usePointAsync();
        }
        
        public void giveUp() {
            base.Channel.giveUp();
        }
        
        public System.Threading.Tasks.Task giveUpAsync() {
            return base.Channel.giveUpAsync();
        }
        
        public void sendMessage(string message, ClientTest.MonsterFeastService.Player sender, System.DateTime time) {
            base.Channel.sendMessage(message, sender, time);
        }
        
        public System.Threading.Tasks.Task sendMessageAsync(string message, ClientTest.MonsterFeastService.Player sender, System.DateTime time) {
            return base.Channel.sendMessageAsync(message, sender, time);
        }
        
        public void SubscribeMatch() {
            base.Channel.SubscribeMatch();
        }
        
        public System.Threading.Tasks.Task SubscribeMatchAsync() {
            return base.Channel.SubscribeMatchAsync();
        }
        
        public void UnSubscribeMatch() {
            base.Channel.UnSubscribeMatch();
        }
        
        public System.Threading.Tasks.Task UnSubscribeMatchAsync() {
            return base.Channel.UnSubscribeMatchAsync();
        }
    }
}
