//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonsterFeastClient.MonsterFeastService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Skill", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Skill : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EffectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MonsterFeastClient.MonsterFeastService.Element ElementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PowerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Effect {
            get {
                return this.EffectField;
            }
            set {
                if ((object.ReferenceEquals(this.EffectField, value) != true)) {
                    this.EffectField = value;
                    this.RaisePropertyChanged("Effect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MonsterFeastClient.MonsterFeastService.Element Element {
            get {
                return this.ElementField;
            }
            set {
                if ((this.ElementField.Equals(value) != true)) {
                    this.ElementField = value;
                    this.RaisePropertyChanged("Element");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PowerName {
            get {
                return this.PowerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PowerNameField, value) != true)) {
                    this.PowerNameField = value;
                    this.RaisePropertyChanged("PowerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Element", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    public enum Element : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Water = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fire = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Air = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Earth = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MonsterFeastClient.MonsterFeastService.Character CharacterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LosesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MonsterFeastClient.MonsterFeastService.Character Character {
            get {
                return this.CharacterField;
            }
            set {
                if ((object.ReferenceEquals(this.CharacterField, value) != true)) {
                    this.CharacterField = value;
                    this.RaisePropertyChanged("Character");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Loses {
            get {
                return this.LosesField;
            }
            set {
                if ((this.LosesField.Equals(value) != true)) {
                    this.LosesField = value;
                    this.RaisePropertyChanged("Loses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Character", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    [System.SerializableAttribute()]
    public partial class Character : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttributePointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MonsterFeastClient.MonsterFeastService.CharClass CharClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConstitutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DexterityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MonsterFeastClient.MonsterFeastService.Element ElementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExperienceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MagicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StrengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WisdomField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Agility {
            get {
                return this.AgilityField;
            }
            set {
                if ((this.AgilityField.Equals(value) != true)) {
                    this.AgilityField = value;
                    this.RaisePropertyChanged("Agility");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttributePoints {
            get {
                return this.AttributePointsField;
            }
            set {
                if ((this.AttributePointsField.Equals(value) != true)) {
                    this.AttributePointsField = value;
                    this.RaisePropertyChanged("AttributePoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MonsterFeastClient.MonsterFeastService.CharClass CharClass {
            get {
                return this.CharClassField;
            }
            set {
                if ((this.CharClassField.Equals(value) != true)) {
                    this.CharClassField = value;
                    this.RaisePropertyChanged("CharClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Constitution {
            get {
                return this.ConstitutionField;
            }
            set {
                if ((this.ConstitutionField.Equals(value) != true)) {
                    this.ConstitutionField = value;
                    this.RaisePropertyChanged("Constitution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dexterity {
            get {
                return this.DexterityField;
            }
            set {
                if ((this.DexterityField.Equals(value) != true)) {
                    this.DexterityField = value;
                    this.RaisePropertyChanged("Dexterity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MonsterFeastClient.MonsterFeastService.Element Element {
            get {
                return this.ElementField;
            }
            set {
                if ((this.ElementField.Equals(value) != true)) {
                    this.ElementField = value;
                    this.RaisePropertyChanged("Element");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Experience {
            get {
                return this.ExperienceField;
            }
            set {
                if ((this.ExperienceField.Equals(value) != true)) {
                    this.ExperienceField = value;
                    this.RaisePropertyChanged("Experience");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Magic {
            get {
                return this.MagicField;
            }
            set {
                if ((this.MagicField.Equals(value) != true)) {
                    this.MagicField = value;
                    this.RaisePropertyChanged("Magic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Strength {
            get {
                return this.StrengthField;
            }
            set {
                if ((this.StrengthField.Equals(value) != true)) {
                    this.StrengthField = value;
                    this.RaisePropertyChanged("Strength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wisdom {
            get {
                return this.WisdomField;
            }
            set {
                if ((this.WisdomField.Equals(value) != true)) {
                    this.WisdomField = value;
                    this.RaisePropertyChanged("Wisdom");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CharClass", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    public enum CharClass : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warrior = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mage = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Archer = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attribute", Namespace="http://schemas.datacontract.org/2004/07/MonsterFeastService")]
    public enum Attribute : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Strength = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Constitution = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Magic = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wisdom = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Agility = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dexterity = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MonsterFeastContract", ConfigurationName="MonsterFeastService.IGame")]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/attack", ReplyAction="MonsterFeastContract/IGame/attackResponse")]
        void attack(MonsterFeastClient.MonsterFeastService.Skill a);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/attack", ReplyAction="MonsterFeastContract/IGame/attackResponse")]
        System.Threading.Tasks.Task attackAsync(MonsterFeastClient.MonsterFeastService.Skill a);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/usePoint", ReplyAction="MonsterFeastContract/IGame/usePointResponse")]
        void usePoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/usePoint", ReplyAction="MonsterFeastContract/IGame/usePointResponse")]
        System.Threading.Tasks.Task usePointAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/giveUp", ReplyAction="MonsterFeastContract/IGame/giveUpResponse")]
        void giveUp();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/giveUp", ReplyAction="MonsterFeastContract/IGame/giveUpResponse")]
        System.Threading.Tasks.Task giveUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/sendMessage", ReplyAction="MonsterFeastContract/IGame/sendMessageResponse")]
        void sendMessage(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/IGame/sendMessage", ReplyAction="MonsterFeastContract/IGame/sendMessageResponse")]
        System.Threading.Tasks.Task sendMessageAsync(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : MonsterFeastClient.MonsterFeastService.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.ClientBase<MonsterFeastClient.MonsterFeastService.IGame>, MonsterFeastClient.MonsterFeastService.IGame {
        
        public GameClient() {
        }
        
        public GameClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void attack(MonsterFeastClient.MonsterFeastService.Skill a) {
            base.Channel.attack(a);
        }
        
        public System.Threading.Tasks.Task attackAsync(MonsterFeastClient.MonsterFeastService.Skill a) {
            return base.Channel.attackAsync(a);
        }
        
        public void usePoint() {
            base.Channel.usePoint();
        }
        
        public System.Threading.Tasks.Task usePointAsync() {
            return base.Channel.usePointAsync();
        }
        
        public void giveUp() {
            base.Channel.giveUp();
        }
        
        public System.Threading.Tasks.Task giveUpAsync() {
            return base.Channel.giveUpAsync();
        }
        
        public void sendMessage(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time) {
            base.Channel.sendMessage(message, sender, time);
        }
        
        public System.Threading.Tasks.Task sendMessageAsync(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time) {
            return base.Channel.sendMessageAsync(message, sender, time);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MonsterFeastContract", ConfigurationName="MonsterFeastService.ILobby", CallbackContract=typeof(MonsterFeastClient.MonsterFeastService.ILobbyCallback))]
    public interface ILobby {
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/Register", ReplyAction="MonsterFeastContract/ILobby/RegisterResponse")]
        void Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/Register", ReplyAction="MonsterFeastContract/ILobby/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/Login", ReplyAction="MonsterFeastContract/ILobby/LoginResponse")]
        MonsterFeastClient.MonsterFeastService.Player Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/Login", ReplyAction="MonsterFeastContract/ILobby/LoginResponse")]
        System.Threading.Tasks.Task<MonsterFeastClient.MonsterFeastService.Player> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/Logout", ReplyAction="MonsterFeastContract/ILobby/LogoutResponse")]
        bool Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/Logout", ReplyAction="MonsterFeastContract/ILobby/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/isFirstTime", ReplyAction="MonsterFeastContract/ILobby/isFirstTimeResponse")]
        bool isFirstTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/isFirstTime", ReplyAction="MonsterFeastContract/ILobby/isFirstTimeResponse")]
        System.Threading.Tasks.Task<bool> isFirstTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/FindMatch", ReplyAction="MonsterFeastContract/ILobby/FindMatchResponse")]
        void FindMatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/FindMatch", ReplyAction="MonsterFeastContract/ILobby/FindMatchResponse")]
        System.Threading.Tasks.Task FindMatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/AllocateAttribute", ReplyAction="MonsterFeastContract/ILobby/AllocateAttributeResponse")]
        void AllocateAttribute(MonsterFeastClient.MonsterFeastService.Attribute a);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/AllocateAttribute", ReplyAction="MonsterFeastContract/ILobby/AllocateAttributeResponse")]
        System.Threading.Tasks.Task AllocateAttributeAsync(MonsterFeastClient.MonsterFeastService.Attribute a);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SubscribeMatch", ReplyAction="MonsterFeastContract/ILobby/SubscribeMatchResponse")]
        void SubscribeMatch(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SubscribeMatch", ReplyAction="MonsterFeastContract/ILobby/SubscribeMatchResponse")]
        System.Threading.Tasks.Task SubscribeMatchAsync(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/UnSubscribeMatch", ReplyAction="MonsterFeastContract/ILobby/UnSubscribeMatchResponse")]
        void UnSubscribeMatch(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/UnSubscribeMatch", ReplyAction="MonsterFeastContract/ILobby/UnSubscribeMatchResponse")]
        System.Threading.Tasks.Task UnSubscribeMatchAsync(int roomNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SubscribeListPlayers", ReplyAction="MonsterFeastContract/ILobby/SubscribeListPlayersResponse")]
        void SubscribeListPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SubscribeListPlayers", ReplyAction="MonsterFeastContract/ILobby/SubscribeListPlayersResponse")]
        System.Threading.Tasks.Task SubscribeListPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/UnSubscribeListPlayers", ReplyAction="MonsterFeastContract/ILobby/UnSubscribeListPlayersResponse")]
        void UnSubscribeListPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/UnSubscribeListPlayers", ReplyAction="MonsterFeastContract/ILobby/UnSubscribeListPlayersResponse")]
        System.Threading.Tasks.Task UnSubscribeListPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/getOnlinePlayers", ReplyAction="MonsterFeastContract/ILobby/getOnlinePlayersResponse")]
        string[] getOnlinePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/getOnlinePlayers", ReplyAction="MonsterFeastContract/ILobby/getOnlinePlayersResponse")]
        System.Threading.Tasks.Task<string[]> getOnlinePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SendMessage", ReplyAction="MonsterFeastContract/ILobby/SendMessageResponse")]
        void SendMessage(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SendMessage", ReplyAction="MonsterFeastContract/ILobby/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SubscribeChatBox", ReplyAction="MonsterFeastContract/ILobby/SubscribeChatBoxResponse")]
        void SubscribeChatBox();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/SubscribeChatBox", ReplyAction="MonsterFeastContract/ILobby/SubscribeChatBoxResponse")]
        System.Threading.Tasks.Task SubscribeChatBoxAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/UnSubscribeChatBox", ReplyAction="MonsterFeastContract/ILobby/UnSubscribeChatBoxResponse")]
        void UnSubscribeChatBox();
        
        [System.ServiceModel.OperationContractAttribute(Action="MonsterFeastContract/ILobby/UnSubscribeChatBox", ReplyAction="MonsterFeastContract/ILobby/UnSubscribeChatBoxResponse")]
        System.Threading.Tasks.Task UnSubscribeChatBoxAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MonsterFeastContract/ILobby/updateChatBox")]
        void updateChatBox(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyChannel : MonsterFeastClient.MonsterFeastService.ILobby, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyClient : System.ServiceModel.DuplexClientBase<MonsterFeastClient.MonsterFeastService.ILobby>, MonsterFeastClient.MonsterFeastService.ILobby {
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register(string username, string password) {
            base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string username, string password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public MonsterFeastClient.MonsterFeastService.Player Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<MonsterFeastClient.MonsterFeastService.Player> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout() {
            return base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public bool isFirstTime() {
            return base.Channel.isFirstTime();
        }
        
        public System.Threading.Tasks.Task<bool> isFirstTimeAsync() {
            return base.Channel.isFirstTimeAsync();
        }
        
        public void FindMatch() {
            base.Channel.FindMatch();
        }
        
        public System.Threading.Tasks.Task FindMatchAsync() {
            return base.Channel.FindMatchAsync();
        }
        
        public void AllocateAttribute(MonsterFeastClient.MonsterFeastService.Attribute a) {
            base.Channel.AllocateAttribute(a);
        }
        
        public System.Threading.Tasks.Task AllocateAttributeAsync(MonsterFeastClient.MonsterFeastService.Attribute a) {
            return base.Channel.AllocateAttributeAsync(a);
        }
        
        public void SubscribeMatch(int roomNr) {
            base.Channel.SubscribeMatch(roomNr);
        }
        
        public System.Threading.Tasks.Task SubscribeMatchAsync(int roomNr) {
            return base.Channel.SubscribeMatchAsync(roomNr);
        }
        
        public void UnSubscribeMatch(int roomNr) {
            base.Channel.UnSubscribeMatch(roomNr);
        }
        
        public System.Threading.Tasks.Task UnSubscribeMatchAsync(int roomNr) {
            return base.Channel.UnSubscribeMatchAsync(roomNr);
        }
        
        public void SubscribeListPlayers() {
            base.Channel.SubscribeListPlayers();
        }
        
        public System.Threading.Tasks.Task SubscribeListPlayersAsync() {
            return base.Channel.SubscribeListPlayersAsync();
        }
        
        public void UnSubscribeListPlayers() {
            base.Channel.UnSubscribeListPlayers();
        }
        
        public System.Threading.Tasks.Task UnSubscribeListPlayersAsync() {
            return base.Channel.UnSubscribeListPlayersAsync();
        }
        
        public string[] getOnlinePlayers() {
            return base.Channel.getOnlinePlayers();
        }
        
        public System.Threading.Tasks.Task<string[]> getOnlinePlayersAsync() {
            return base.Channel.getOnlinePlayersAsync();
        }
        
        public void SendMessage(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time) {
            base.Channel.SendMessage(message, sender, time);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, MonsterFeastClient.MonsterFeastService.Player sender, System.DateTime time) {
            return base.Channel.SendMessageAsync(message, sender, time);
        }
        
        public void SubscribeChatBox() {
            base.Channel.SubscribeChatBox();
        }
        
        public System.Threading.Tasks.Task SubscribeChatBoxAsync() {
            return base.Channel.SubscribeChatBoxAsync();
        }
        
        public void UnSubscribeChatBox() {
            base.Channel.UnSubscribeChatBox();
        }
        
        public System.Threading.Tasks.Task UnSubscribeChatBoxAsync() {
            return base.Channel.UnSubscribeChatBoxAsync();
        }
    }
}
